using UnityEngine;using System.Collections;using System.Linq;public enum ControlButton{    Up,    Down,    Left,    Right,    Shoot,    Noof}public enum PlayerIdentity{    Owen,    Grace,    Noof}public class ControllerManager : MonoBehaviour {    /// <summary>    /// Singleton instance    /// </summary>    private static ControllerManager s_instance = null;    /// <summary>    /// Public access to the controller manager    /// </summary>    public static ControllerManager Instance    {        get { return s_instance; }    }    /// <summary>    ///     /// </summary>    private Vector2[] m_lastKnownDirections = new Vector2[(int)PlayerIdentity.Noof];    /// <summary>    ///     /// </summary>    private Transform[] m_players = new Transform[(int)PlayerIdentity.Noof];    void Awake()    {        if (s_instance != null)        {            Debug.LogError("Multiple controller managers exist");            return;        }        s_instance = this;    }	    void Start()    {        for (int entryIndex = 0; entryIndex < m_lastKnownDirections.Length; ++entryIndex)        {            m_lastKnownDirections[entryIndex] = new Vector2(1.0f, 0.0f);        }        var allPlayers = Transform.FindObjectsOfType<ControllableCharacter>();        foreach (var player in allPlayers)        {            m_players[(int)player.Identity] = player.transform;        }    }    void Update()    {        for (int playerIndex = 0; playerIndex < (int)PlayerIdentity.Noof; ++playerIndex)        {            var device = GetDevice((PlayerIdentity)playerIndex);            if (device == null)            {                continue;            }            var controllerDirection = new Vector2(device.RightStickX, device.RightStickY);            if (controllerDirection.magnitude < 0.5f)            {                controllerDirection = m_lastKnownDirections[playerIndex];            }            m_lastKnownDirections[playerIndex] = controllerDirection.normalized;        }    }    private InControl.InputDevice GetDevice(PlayerIdentity player)    {        var devices = InControl.InputManager.Devices;        if (devices.Count == 0)        {            return null;        }        if (devices.Count == 1)        {            player = PlayerIdentity.Owen;        }        return devices[(int)player];    }    public bool IsButtonPressed(PlayerIdentity player, ControlButton button)    {        var device = GetDevice(player);        if (device == null)        {            return false;        }        switch (button)        {            case ControlButton.Up:                {                    return device.LeftStickY > 0.1f;                }            case ControlButton.Down:                {                    return device.LeftStickY < -0.1f;                }            case ControlButton.Left:                {                    return device.LeftStickX < -0.1f;                }            case ControlButton.Right:                {                    return device.LeftStickX > 0.1f;                }            case ControlButton.Shoot:                {                    return device.RightTrigger.IsPressed;                }        }        return false;    }    /// <summary>    ///     /// </summary>    /// <returns></returns>    public Vector2 GetAimDirection(PlayerIdentity player)    {        var device = GetDevice(player);        if (device == null)        {            return Vector2.zero;        }        if (device.Name.Contains("Keyboard"))        {            var screenPoint = Camera.main.WorldToScreenPoint(m_players[(int)player].position);            var direction = (Vector2)(Input.mousePosition - screenPoint);            direction.Normalize();            return direction;        }        return m_lastKnownDirections[(int)player];    }}